// =======================================================
// DENTRO DE backend/pocketbaseClient.js - CORREGIDO
// =======================================================

// üö® CORRECCI√ìN: Usar una URL de CDN para que el navegador pueda resolver el m√≥dulo.
import PocketBase from 'https://esm.sh/pocketbase@0.21.1'; // Usamos esm.sh con la versi√≥n (ajusta la versi√≥n si es necesario)

// Inicializa la conexi√≥n a tu servidor PocketBase 
// ‚ö†Ô∏è Aseg√∫rate de que esta URL sea la correcta si no usas localhost:8090
const pb = new PocketBase('http://127.0.0.1:8090');

// =======================================================
// A√ëADIDO PARA VERIFICAR LA CONEXI√ìN (Mantenido)
// =======================================================

/**
 * Funci√≥n que verifica as√≠ncronamente si el servidor PocketBase est√° accesible.
 */
async function checkConnection() {
    try {
        const health = await pb.health.check(); 
        
        if (health.code === 200) {
            console.log('‚úÖ PocketBaseClient: Conexi√≥n establecida con √©xito.');
        } else {
            // Esto puede ocurrir si el servidor est√° en l√≠nea pero devuelve un c√≥digo de mantenimiento, etc.
            console.warn(`‚ö†Ô∏è PocketBaseClient: Conexi√≥n establecida, pero el estado de salud no es 200. C√≥digo: ${health.code}`);
        }
    } catch (error) {
        // Esto captura fallos de red (CORS, servidor apagado, etc.)
        console.error('‚ùå PocketBaseClient: ERROR al conectar.', 'Aseg√∫rate de que "pocketbase.exe serve" est√° corriendo en http://127.0.0.1:8090.', error);
    }
}

// Llama a la funci√≥n para ejecutar la verificaci√≥n inmediatamente.
// La instancia 'pb' se exporta inmediatamente, independientemente del resultado de esta llamada as√≠ncrona.
checkConnection();

// =======================================================
// FIN DE LA VERIFICACI√ìN
// =======================================================

// Exporta la instancia para que otros archivos JS puedan usarla
export default pb;